//-----------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
//
//   For more information, see: http://go.microsoft.com/fwlink/?LinkID=623246
// </auto-generated>
//-----------------------------------------------------------------------------
#pragma once

using namespace concurrency;

namespace org { namespace alljoyn { namespace SmartSpaces { namespace Environment { namespace CurrentHumidity {

ref class CurrentHumidityConsumer;

public ref class CurrentHumidityJoinSessionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property CurrentHumidityConsumer^ Consumer
    {
        CurrentHumidityConsumer^ get() { return m_consumer; }
    internal:
        void set(_In_ CurrentHumidityConsumer^ value) { m_consumer = value; }
    };

private:
    int32 m_status;
    CurrentHumidityConsumer^ m_consumer;
};

public ref class CurrentHumidityGetVersionResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property uint16 Version
    {
        uint16 get() { return m_value; }
    internal:
        void set(_In_ uint16 value) { m_value = value; }
    }

    static CurrentHumidityGetVersionResult^ CreateSuccessResult(_In_ uint16 value)
    {
        auto result = ref new CurrentHumidityGetVersionResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->Version = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static CurrentHumidityGetVersionResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new CurrentHumidityGetVersionResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    uint16 m_value;
};

public ref class CurrentHumidityGetCurrentValueResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property byte CurrentValue
    {
        byte get() { return m_value; }
    internal:
        void set(_In_ byte value) { m_value = value; }
    }

    static CurrentHumidityGetCurrentValueResult^ CreateSuccessResult(_In_ byte value)
    {
        auto result = ref new CurrentHumidityGetCurrentValueResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->CurrentValue = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static CurrentHumidityGetCurrentValueResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new CurrentHumidityGetCurrentValueResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    byte m_value;
};

public ref class CurrentHumidityGetMaxValueResult sealed
{
public:
    property int32 Status
    {
        int32 get() { return m_status; }
    internal:
        void set(_In_ int32 value) { m_status = value; }
    }

    property byte MaxValue
    {
        byte get() { return m_value; }
    internal:
        void set(_In_ byte value) { m_value = value; }
    }

    static CurrentHumidityGetMaxValueResult^ CreateSuccessResult(_In_ byte value)
    {
        auto result = ref new CurrentHumidityGetMaxValueResult();
        result->Status = Windows::Devices::AllJoyn::AllJoynStatus::Ok;
        result->MaxValue = value;
        result->m_creationContext = Concurrency::task_continuation_context::use_current();
        return result;
    }

    static CurrentHumidityGetMaxValueResult^ CreateFailureResult(_In_ int32 status)
    {
        auto result = ref new CurrentHumidityGetMaxValueResult();
        result->Status = status;
        return result;
    }
internal:
    Concurrency::task_continuation_context m_creationContext = Concurrency::task_continuation_context::use_default();

private:
    int32 m_status;
    byte m_value;
};

} } } } } 
